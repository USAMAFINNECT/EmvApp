package com.topwise.sdk.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.topwise.sdk.emv.daoutils.entity.uAid;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "U_AID".
*/
public class uAidDao extends AbstractDao<uAid, Long> {

    public static final String TABLENAME = "U_AID";

    /**
     * Properties of entity uAid.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Aid = new Property(1, String.class, "aid", false, "AID");
        public final static Property SelFlag = new Property(2, int.class, "selFlag", false, "SEL_FLAG");
        public final static Property IsAllowOnlinePIN = new Property(3, boolean.class, "isAllowOnlinePIN", false, "IS_ALLOW_ONLINE_PIN");
        public final static Property EcTTL = new Property(4, int.class, "ecTTL", false, "EC_TTL");
        public final static Property RdCVMLimit = new Property(5, int.class, "rdCVMLimit", false, "RD_CVMLIMIT");
        public final static Property RdClssFloorLimit = new Property(6, int.class, "rdClssFloorLimit", false, "RD_CLSS_FLOOR_LIMIT");
        public final static Property RdClssFloorLimitFlg = new Property(7, boolean.class, "rdClssFloorLimitFlg", false, "RD_CLSS_FLOOR_LIMIT_FLG");
        public final static Property RdClssFLmt = new Property(8, long.class, "rdClssFLmt", false, "RD_CLSS_FLMT");
        public final static Property EcTTLFlg = new Property(9, int.class, "ecTTLFlg", false, "EC_TTLFLG");
        public final static Property RdClssTxnLimit = new Property(10, int.class, "rdClssTxnLimit", false, "RD_CLSS_TXN_LIMIT");
        public final static Property RdClssTxnLimitFlg = new Property(11, boolean.class, "rdClssTxnLimitFlg", false, "RD_CLSS_TXN_LIMIT_FLG");
        public final static Property RdCVMLimitFlg = new Property(12, boolean.class, "rdCVMLimitFlg", false, "RD_CVMLIMIT_FLG");
        public final static Property TargetPer = new Property(13, int.class, "targetPer", false, "TARGET_PER");
        public final static Property MaxTargetPer = new Property(14, int.class, "maxTargetPer", false, "MAX_TARGET_PER");
        public final static Property FloorlimitFlg = new Property(15, boolean.class, "floorlimitFlg", false, "FLOORLIMIT_FLG");
        public final static Property RandTransSel = new Property(16, boolean.class, "randTransSel", false, "RAND_TRANS_SEL");
        public final static Property VelocityCheck = new Property(17, boolean.class, "velocityCheck", false, "VELOCITY_CHECK");
        public final static Property FloorLimit = new Property(18, int.class, "floorLimit", false, "FLOOR_LIMIT");
        public final static Property Threshold = new Property(19, int.class, "threshold", false, "THRESHOLD");
        public final static Property TacDenial = new Property(20, String.class, "tacDenial", false, "TAC_DENIAL");
        public final static Property TacOnline = new Property(21, String.class, "tacOnline", false, "TAC_ONLINE");
        public final static Property TbcDefualt = new Property(22, String.class, "tbcDefualt", false, "TBC_DEFUALT");
        public final static Property AcquierId = new Property(23, String.class, "acquierId", false, "ACQUIER_ID");
        public final static Property DDOL = new Property(24, String.class, "dDOL", false, "D_DOL");
        public final static Property TDOL = new Property(25, String.class, "tDOL", false, "T_DOL");
        public final static Property Version = new Property(26, String.class, "version", false, "VERSION");
        public final static Property RiskmanData = new Property(27, String.class, "riskmanData", false, "RISKMAN_DATA");
        public final static Property KernelType = new Property(28, String.class, "kernelType", false, "KERNEL_TYPE");
        public final static Property RiskManData = new Property(29, String.class, "riskManData", false, "RISK_MAN_DATA");
        public final static Property TacDefault = new Property(30, String.class, "tacDefault", false, "TAC_DEFAULT");
        public final static Property MerchName = new Property(31, String.class, "merchName", false, "MERCH_NAME");
        public final static Property MerchCateCode = new Property(32, String.class, "merchCateCode", false, "MERCH_CATE_CODE");
        public final static Property MerchId = new Property(33, String.class, "merchId", false, "MERCH_ID");
        public final static Property TermId = new Property(34, String.class, "termId", false, "TERM_ID");
        public final static Property TransCurrCode = new Property(35, String.class, "transCurrCode", false, "TRANS_CURR_CODE");
        public final static Property TransCurrExp = new Property(36, int.class, "transCurrExp", false, "TRANS_CURR_EXP");
        public final static Property ReferCurrCode = new Property(37, String.class, "referCurrCode", false, "REFER_CURR_CODE");
        public final static Property ReferCurrExp = new Property(38, int.class, "referCurrExp", false, "REFER_CURR_EXP");
        public final static Property ReferCurrCon = new Property(39, int.class, "referCurrCon", false, "REFER_CURR_CON");
    }


    public uAidDao(DaoConfig config) {
        super(config);
    }
    
    public uAidDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"U_AID\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"AID\" TEXT UNIQUE ," + // 1: aid
                "\"SEL_FLAG\" INTEGER NOT NULL ," + // 2: selFlag
                "\"IS_ALLOW_ONLINE_PIN\" INTEGER NOT NULL ," + // 3: isAllowOnlinePIN
                "\"EC_TTL\" INTEGER NOT NULL ," + // 4: ecTTL
                "\"RD_CVMLIMIT\" INTEGER NOT NULL ," + // 5: rdCVMLimit
                "\"RD_CLSS_FLOOR_LIMIT\" INTEGER NOT NULL ," + // 6: rdClssFloorLimit
                "\"RD_CLSS_FLOOR_LIMIT_FLG\" INTEGER NOT NULL ," + // 7: rdClssFloorLimitFlg
                "\"RD_CLSS_FLMT\" INTEGER NOT NULL ," + // 8: rdClssFLmt
                "\"EC_TTLFLG\" INTEGER NOT NULL ," + // 9: ecTTLFlg
                "\"RD_CLSS_TXN_LIMIT\" INTEGER NOT NULL ," + // 10: rdClssTxnLimit
                "\"RD_CLSS_TXN_LIMIT_FLG\" INTEGER NOT NULL ," + // 11: rdClssTxnLimitFlg
                "\"RD_CVMLIMIT_FLG\" INTEGER NOT NULL ," + // 12: rdCVMLimitFlg
                "\"TARGET_PER\" INTEGER NOT NULL ," + // 13: targetPer
                "\"MAX_TARGET_PER\" INTEGER NOT NULL ," + // 14: maxTargetPer
                "\"FLOORLIMIT_FLG\" INTEGER NOT NULL ," + // 15: floorlimitFlg
                "\"RAND_TRANS_SEL\" INTEGER NOT NULL ," + // 16: randTransSel
                "\"VELOCITY_CHECK\" INTEGER NOT NULL ," + // 17: velocityCheck
                "\"FLOOR_LIMIT\" INTEGER NOT NULL ," + // 18: floorLimit
                "\"THRESHOLD\" INTEGER NOT NULL ," + // 19: threshold
                "\"TAC_DENIAL\" TEXT," + // 20: tacDenial
                "\"TAC_ONLINE\" TEXT," + // 21: tacOnline
                "\"TBC_DEFUALT\" TEXT," + // 22: tbcDefualt
                "\"ACQUIER_ID\" TEXT," + // 23: acquierId
                "\"D_DOL\" TEXT," + // 24: dDOL
                "\"T_DOL\" TEXT," + // 25: tDOL
                "\"VERSION\" TEXT," + // 26: version
                "\"RISKMAN_DATA\" TEXT," + // 27: riskmanData
                "\"KERNEL_TYPE\" TEXT," + // 28: kernelType
                "\"RISK_MAN_DATA\" TEXT," + // 29: riskManData
                "\"TAC_DEFAULT\" TEXT," + // 30: tacDefault
                "\"MERCH_NAME\" TEXT," + // 31: merchName
                "\"MERCH_CATE_CODE\" TEXT," + // 32: merchCateCode
                "\"MERCH_ID\" TEXT," + // 33: merchId
                "\"TERM_ID\" TEXT," + // 34: termId
                "\"TRANS_CURR_CODE\" TEXT," + // 35: transCurrCode
                "\"TRANS_CURR_EXP\" INTEGER NOT NULL ," + // 36: transCurrExp
                "\"REFER_CURR_CODE\" TEXT," + // 37: referCurrCode
                "\"REFER_CURR_EXP\" INTEGER NOT NULL ," + // 38: referCurrExp
                "\"REFER_CURR_CON\" INTEGER NOT NULL );"); // 39: referCurrCon
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"U_AID\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, uAid entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String aid = entity.getAid();
        if (aid != null) {
            stmt.bindString(2, aid);
        }
        stmt.bindLong(3, entity.getSelFlag());
        stmt.bindLong(4, entity.getIsAllowOnlinePIN() ? 1L: 0L);
        stmt.bindLong(5, entity.getEcTTL());
        stmt.bindLong(6, entity.getRdCVMLimit());
        stmt.bindLong(7, entity.getRdClssFloorLimit());
        stmt.bindLong(8, entity.getRdClssFloorLimitFlg() ? 1L: 0L);
        stmt.bindLong(9, entity.getRdClssFLmt());
        stmt.bindLong(10, entity.getEcTTLFlg());
        stmt.bindLong(11, entity.getRdClssTxnLimit());
        stmt.bindLong(12, entity.getRdClssTxnLimitFlg() ? 1L: 0L);
        stmt.bindLong(13, entity.getRdCVMLimitFlg() ? 1L: 0L);
        stmt.bindLong(14, entity.getTargetPer());
        stmt.bindLong(15, entity.getMaxTargetPer());
        stmt.bindLong(16, entity.getFloorlimitFlg() ? 1L: 0L);
        stmt.bindLong(17, entity.getRandTransSel() ? 1L: 0L);
        stmt.bindLong(18, entity.getVelocityCheck() ? 1L: 0L);
        stmt.bindLong(19, entity.getFloorLimit());
        stmt.bindLong(20, entity.getThreshold());
 
        String tacDenial = entity.getTacDenial();
        if (tacDenial != null) {
            stmt.bindString(21, tacDenial);
        }
 
        String tacOnline = entity.getTacOnline();
        if (tacOnline != null) {
            stmt.bindString(22, tacOnline);
        }
 
        String tbcDefualt = entity.getTbcDefualt();
        if (tbcDefualt != null) {
            stmt.bindString(23, tbcDefualt);
        }
 
        String acquierId = entity.getAcquierId();
        if (acquierId != null) {
            stmt.bindString(24, acquierId);
        }
 
        String dDOL = entity.getDDOL();
        if (dDOL != null) {
            stmt.bindString(25, dDOL);
        }
 
        String tDOL = entity.getTDOL();
        if (tDOL != null) {
            stmt.bindString(26, tDOL);
        }
 
        String version = entity.getVersion();
        if (version != null) {
            stmt.bindString(27, version);
        }
 
        String riskmanData = entity.getRiskmanData();
        if (riskmanData != null) {
            stmt.bindString(28, riskmanData);
        }
 
        String kernelType = entity.getKernelType();
        if (kernelType != null) {
            stmt.bindString(29, kernelType);
        }
 
        String riskManData = entity.getRiskManData();
        if (riskManData != null) {
            stmt.bindString(30, riskManData);
        }
 
        String tacDefault = entity.getTacDefault();
        if (tacDefault != null) {
            stmt.bindString(31, tacDefault);
        }
 
        String merchName = entity.getMerchName();
        if (merchName != null) {
            stmt.bindString(32, merchName);
        }
 
        String merchCateCode = entity.getMerchCateCode();
        if (merchCateCode != null) {
            stmt.bindString(33, merchCateCode);
        }
 
        String merchId = entity.getMerchId();
        if (merchId != null) {
            stmt.bindString(34, merchId);
        }
 
        String termId = entity.getTermId();
        if (termId != null) {
            stmt.bindString(35, termId);
        }
 
        String transCurrCode = entity.getTransCurrCode();
        if (transCurrCode != null) {
            stmt.bindString(36, transCurrCode);
        }
        stmt.bindLong(37, entity.getTransCurrExp());
 
        String referCurrCode = entity.getReferCurrCode();
        if (referCurrCode != null) {
            stmt.bindString(38, referCurrCode);
        }
        stmt.bindLong(39, entity.getReferCurrExp());
        stmt.bindLong(40, entity.getReferCurrCon());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, uAid entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String aid = entity.getAid();
        if (aid != null) {
            stmt.bindString(2, aid);
        }
        stmt.bindLong(3, entity.getSelFlag());
        stmt.bindLong(4, entity.getIsAllowOnlinePIN() ? 1L: 0L);
        stmt.bindLong(5, entity.getEcTTL());
        stmt.bindLong(6, entity.getRdCVMLimit());
        stmt.bindLong(7, entity.getRdClssFloorLimit());
        stmt.bindLong(8, entity.getRdClssFloorLimitFlg() ? 1L: 0L);
        stmt.bindLong(9, entity.getRdClssFLmt());
        stmt.bindLong(10, entity.getEcTTLFlg());
        stmt.bindLong(11, entity.getRdClssTxnLimit());
        stmt.bindLong(12, entity.getRdClssTxnLimitFlg() ? 1L: 0L);
        stmt.bindLong(13, entity.getRdCVMLimitFlg() ? 1L: 0L);
        stmt.bindLong(14, entity.getTargetPer());
        stmt.bindLong(15, entity.getMaxTargetPer());
        stmt.bindLong(16, entity.getFloorlimitFlg() ? 1L: 0L);
        stmt.bindLong(17, entity.getRandTransSel() ? 1L: 0L);
        stmt.bindLong(18, entity.getVelocityCheck() ? 1L: 0L);
        stmt.bindLong(19, entity.getFloorLimit());
        stmt.bindLong(20, entity.getThreshold());
 
        String tacDenial = entity.getTacDenial();
        if (tacDenial != null) {
            stmt.bindString(21, tacDenial);
        }
 
        String tacOnline = entity.getTacOnline();
        if (tacOnline != null) {
            stmt.bindString(22, tacOnline);
        }
 
        String tbcDefualt = entity.getTbcDefualt();
        if (tbcDefualt != null) {
            stmt.bindString(23, tbcDefualt);
        }
 
        String acquierId = entity.getAcquierId();
        if (acquierId != null) {
            stmt.bindString(24, acquierId);
        }
 
        String dDOL = entity.getDDOL();
        if (dDOL != null) {
            stmt.bindString(25, dDOL);
        }
 
        String tDOL = entity.getTDOL();
        if (tDOL != null) {
            stmt.bindString(26, tDOL);
        }
 
        String version = entity.getVersion();
        if (version != null) {
            stmt.bindString(27, version);
        }
 
        String riskmanData = entity.getRiskmanData();
        if (riskmanData != null) {
            stmt.bindString(28, riskmanData);
        }
 
        String kernelType = entity.getKernelType();
        if (kernelType != null) {
            stmt.bindString(29, kernelType);
        }
 
        String riskManData = entity.getRiskManData();
        if (riskManData != null) {
            stmt.bindString(30, riskManData);
        }
 
        String tacDefault = entity.getTacDefault();
        if (tacDefault != null) {
            stmt.bindString(31, tacDefault);
        }
 
        String merchName = entity.getMerchName();
        if (merchName != null) {
            stmt.bindString(32, merchName);
        }
 
        String merchCateCode = entity.getMerchCateCode();
        if (merchCateCode != null) {
            stmt.bindString(33, merchCateCode);
        }
 
        String merchId = entity.getMerchId();
        if (merchId != null) {
            stmt.bindString(34, merchId);
        }
 
        String termId = entity.getTermId();
        if (termId != null) {
            stmt.bindString(35, termId);
        }
 
        String transCurrCode = entity.getTransCurrCode();
        if (transCurrCode != null) {
            stmt.bindString(36, transCurrCode);
        }
        stmt.bindLong(37, entity.getTransCurrExp());
 
        String referCurrCode = entity.getReferCurrCode();
        if (referCurrCode != null) {
            stmt.bindString(38, referCurrCode);
        }
        stmt.bindLong(39, entity.getReferCurrExp());
        stmt.bindLong(40, entity.getReferCurrCon());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public uAid readEntity(Cursor cursor, int offset) {
        uAid entity = new uAid( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // aid
            cursor.getInt(offset + 2), // selFlag
            cursor.getShort(offset + 3) != 0, // isAllowOnlinePIN
            cursor.getInt(offset + 4), // ecTTL
            cursor.getInt(offset + 5), // rdCVMLimit
            cursor.getInt(offset + 6), // rdClssFloorLimit
            cursor.getShort(offset + 7) != 0, // rdClssFloorLimitFlg
            cursor.getLong(offset + 8), // rdClssFLmt
            cursor.getInt(offset + 9), // ecTTLFlg
            cursor.getInt(offset + 10), // rdClssTxnLimit
            cursor.getShort(offset + 11) != 0, // rdClssTxnLimitFlg
            cursor.getShort(offset + 12) != 0, // rdCVMLimitFlg
            cursor.getInt(offset + 13), // targetPer
            cursor.getInt(offset + 14), // maxTargetPer
            cursor.getShort(offset + 15) != 0, // floorlimitFlg
            cursor.getShort(offset + 16) != 0, // randTransSel
            cursor.getShort(offset + 17) != 0, // velocityCheck
            cursor.getInt(offset + 18), // floorLimit
            cursor.getInt(offset + 19), // threshold
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // tacDenial
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // tacOnline
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // tbcDefualt
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // acquierId
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24), // dDOL
            cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25), // tDOL
            cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26), // version
            cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27), // riskmanData
            cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28), // kernelType
            cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29), // riskManData
            cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30), // tacDefault
            cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31), // merchName
            cursor.isNull(offset + 32) ? null : cursor.getString(offset + 32), // merchCateCode
            cursor.isNull(offset + 33) ? null : cursor.getString(offset + 33), // merchId
            cursor.isNull(offset + 34) ? null : cursor.getString(offset + 34), // termId
            cursor.isNull(offset + 35) ? null : cursor.getString(offset + 35), // transCurrCode
            cursor.getInt(offset + 36), // transCurrExp
            cursor.isNull(offset + 37) ? null : cursor.getString(offset + 37), // referCurrCode
            cursor.getInt(offset + 38), // referCurrExp
            cursor.getInt(offset + 39) // referCurrCon
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, uAid entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setAid(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setSelFlag(cursor.getInt(offset + 2));
        entity.setIsAllowOnlinePIN(cursor.getShort(offset + 3) != 0);
        entity.setEcTTL(cursor.getInt(offset + 4));
        entity.setRdCVMLimit(cursor.getInt(offset + 5));
        entity.setRdClssFloorLimit(cursor.getInt(offset + 6));
        entity.setRdClssFloorLimitFlg(cursor.getShort(offset + 7) != 0);
        entity.setRdClssFLmt(cursor.getLong(offset + 8));
        entity.setEcTTLFlg(cursor.getInt(offset + 9));
        entity.setRdClssTxnLimit(cursor.getInt(offset + 10));
        entity.setRdClssTxnLimitFlg(cursor.getShort(offset + 11) != 0);
        entity.setRdCVMLimitFlg(cursor.getShort(offset + 12) != 0);
        entity.setTargetPer(cursor.getInt(offset + 13));
        entity.setMaxTargetPer(cursor.getInt(offset + 14));
        entity.setFloorlimitFlg(cursor.getShort(offset + 15) != 0);
        entity.setRandTransSel(cursor.getShort(offset + 16) != 0);
        entity.setVelocityCheck(cursor.getShort(offset + 17) != 0);
        entity.setFloorLimit(cursor.getInt(offset + 18));
        entity.setThreshold(cursor.getInt(offset + 19));
        entity.setTacDenial(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setTacOnline(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setTbcDefualt(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setAcquierId(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setDDOL(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
        entity.setTDOL(cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25));
        entity.setVersion(cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26));
        entity.setRiskmanData(cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27));
        entity.setKernelType(cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28));
        entity.setRiskManData(cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29));
        entity.setTacDefault(cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30));
        entity.setMerchName(cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31));
        entity.setMerchCateCode(cursor.isNull(offset + 32) ? null : cursor.getString(offset + 32));
        entity.setMerchId(cursor.isNull(offset + 33) ? null : cursor.getString(offset + 33));
        entity.setTermId(cursor.isNull(offset + 34) ? null : cursor.getString(offset + 34));
        entity.setTransCurrCode(cursor.isNull(offset + 35) ? null : cursor.getString(offset + 35));
        entity.setTransCurrExp(cursor.getInt(offset + 36));
        entity.setReferCurrCode(cursor.isNull(offset + 37) ? null : cursor.getString(offset + 37));
        entity.setReferCurrExp(cursor.getInt(offset + 38));
        entity.setReferCurrCon(cursor.getInt(offset + 39));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(uAid entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(uAid entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(uAid entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
